/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.Osmosis.ConnectRequest', null, global);
goog.exportSymbol('proto.Osmosis.ConnectResponse', null, global);
goog.exportSymbol('proto.Osmosis.ConnectResponse.Status', null, global);
goog.exportSymbol('proto.Osmosis.Heartbeat', null, global);
goog.exportSymbol('proto.Osmosis.Heartbeat.Payload', null, global);
goog.exportSymbol('proto.Osmosis.PairConfirm', null, global);
goog.exportSymbol('proto.Osmosis.PairResponse', null, global);
goog.exportSymbol('proto.Osmosis.PairResponse.Status', null, global);
goog.exportSymbol('proto.Osmosis.PeerInfo', null, global);
goog.exportSymbol('proto.Osmosis.PeerList', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.Heartbeat = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Osmosis.Heartbeat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.Heartbeat.displayName = 'proto.Osmosis.Heartbeat';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.Heartbeat.prototype.toObject = function (opt_includeInstance) {
    return proto.Osmosis.Heartbeat.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.Heartbeat} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.Heartbeat.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        payload:
          (f = msg.getPayload()) &&
          proto.Osmosis.Heartbeat.Payload.toObject(includeInstance, f),
        signature: msg.getSignature_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.Heartbeat}
 */
proto.Osmosis.Heartbeat.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.Heartbeat();
  return proto.Osmosis.Heartbeat.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.Heartbeat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.Heartbeat}
 */
proto.Osmosis.Heartbeat.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Osmosis.Heartbeat.Payload();
        reader.readMessage(
          value,
          proto.Osmosis.Heartbeat.Payload.deserializeBinaryFromReader
        );
        msg.setPayload(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSignature(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.Heartbeat.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.Heartbeat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.Heartbeat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.Heartbeat.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Osmosis.Heartbeat.Payload.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.Heartbeat.Payload = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Osmosis.Heartbeat.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.Heartbeat.Payload.displayName =
    'proto.Osmosis.Heartbeat.Payload';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.Heartbeat.Payload.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Osmosis.Heartbeat.Payload.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.Heartbeat.Payload} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.Heartbeat.Payload.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        appid: msg.getAppid_asB64(),
        peerid: msg.getPeerid_asB64(),
        peername: jspb.Message.getFieldWithDefault(msg, 3, ''),
        ipaddress: jspb.Message.getFieldWithDefault(msg, 4, 0),
        port: jspb.Message.getFieldWithDefault(msg, 5, 0),
        timestamp: jspb.Message.getFieldWithDefault(msg, 6, 0),
        certfingerprint: msg.getCertfingerprint_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.Heartbeat.Payload}
 */
proto.Osmosis.Heartbeat.Payload.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.Heartbeat.Payload();
  return proto.Osmosis.Heartbeat.Payload.deserializeBinaryFromReader(
    msg,
    reader
  );
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.Heartbeat.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.Heartbeat.Payload}
 */
proto.Osmosis.Heartbeat.Payload.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setAppid(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPeerid(value);
        break;
      case 3:
        var value = /** @type {string} */ (reader.readString());
        msg.setPeername(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setIpaddress(value);
        break;
      case 5:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setPort(value);
        break;
      case 6:
        var value = /** @type {number} */ (reader.readUint64());
        msg.setTimestamp(value);
        break;
      case 7:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCertfingerprint(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.Heartbeat.Payload.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.Heartbeat.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.Heartbeat.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.Heartbeat.Payload.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getAppid_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getPeername();
  if (f.length > 0) {
    writer.writeString(3, f);
  }
  f = message.getIpaddress();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(5, f);
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(6, f);
  }
  f = message.getCertfingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(7, f);
  }
};

/**
 * optional bytes appId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getAppid = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes appId = 1;
 * This is a type-conversion wrapper around `getAppid()`
 * @return {string}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getAppid_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getAppid()));
};

/**
 * optional bytes appId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppid()`
 * @return {!Uint8Array}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getAppid_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getAppid()));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.Heartbeat.Payload.prototype.setAppid = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes peerId = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getPeerid = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    ''
  ));
};

/**
 * optional bytes peerId = 2;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getPeerid_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPeerid()));
};

/**
 * optional bytes peerId = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getPeerid_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPeerid()));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.Heartbeat.Payload.prototype.setPeerid = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional string peerName = 3;
 * @return {string}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getPeername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ''));
};

/** @param {string} value */
proto.Osmosis.Heartbeat.Payload.prototype.setPeername = function (value) {
  jspb.Message.setProto3StringField(this, 3, value);
};

/**
 * optional uint32 ipAddress = 4;
 * @return {number}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getIpaddress = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.Osmosis.Heartbeat.Payload.prototype.setIpaddress = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * optional uint32 port = 5;
 * @return {number}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getPort = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};

/** @param {number} value */
proto.Osmosis.Heartbeat.Payload.prototype.setPort = function (value) {
  jspb.Message.setProto3IntField(this, 5, value);
};

/**
 * optional uint64 timestamp = 6;
 * @return {number}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getTimestamp = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};

/** @param {number} value */
proto.Osmosis.Heartbeat.Payload.prototype.setTimestamp = function (value) {
  jspb.Message.setProto3IntField(this, 6, value);
};

/**
 * optional bytes certFingerprint = 7;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getCertfingerprint = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    7,
    ''
  ));
};

/**
 * optional bytes certFingerprint = 7;
 * This is a type-conversion wrapper around `getCertfingerprint()`
 * @return {string}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getCertfingerprint_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getCertfingerprint()
  ));
};

/**
 * optional bytes certFingerprint = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertfingerprint()`
 * @return {!Uint8Array}
 */
proto.Osmosis.Heartbeat.Payload.prototype.getCertfingerprint_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getCertfingerprint()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.Heartbeat.Payload.prototype.setCertfingerprint = function (
  value
) {
  jspb.Message.setProto3BytesField(this, 7, value);
};

/**
 * optional Payload payload = 1;
 * @return {?proto.Osmosis.Heartbeat.Payload}
 */
proto.Osmosis.Heartbeat.prototype.getPayload = function () {
  return /** @type{?proto.Osmosis.Heartbeat.Payload} */ (jspb.Message.getWrapperField(
    this,
    proto.Osmosis.Heartbeat.Payload,
    1
  ));
};

/** @param {?proto.Osmosis.Heartbeat.Payload|undefined} value */
proto.Osmosis.Heartbeat.prototype.setPayload = function (value) {
  jspb.Message.setWrapperField(this, 1, value);
};

proto.Osmosis.Heartbeat.prototype.clearPayload = function () {
  this.setPayload(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Osmosis.Heartbeat.prototype.hasPayload = function () {
  return jspb.Message.getField(this, 1) != null;
};

/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.Heartbeat.prototype.getSignature = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    ''
  ));
};

/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.Osmosis.Heartbeat.prototype.getSignature_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSignature()));
};

/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.Osmosis.Heartbeat.prototype.getSignature_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSignature()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.Heartbeat.prototype.setSignature = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.PeerInfo = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Osmosis.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.PeerInfo.displayName = 'proto.Osmosis.PeerInfo';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.PeerInfo.prototype.toObject = function (opt_includeInstance) {
    return proto.Osmosis.PeerInfo.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.PeerInfo} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.PeerInfo.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        peerid: msg.getPeerid_asB64(),
        peername: jspb.Message.getFieldWithDefault(msg, 2, ''),
        secrettoken: msg.getSecrettoken_asB64(),
        certfingerprint: msg.getCertfingerprint_asB64(),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.PeerInfo}
 */
proto.Osmosis.PeerInfo.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.PeerInfo();
  return proto.Osmosis.PeerInfo.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.PeerInfo}
 */
proto.Osmosis.PeerInfo.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPeerid(value);
        break;
      case 2:
        var value = /** @type {string} */ (reader.readString());
        msg.setPeername(value);
        break;
      case 3:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSecrettoken(value);
        break;
      case 4:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setCertfingerprint(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.PeerInfo.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.PeerInfo.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getPeername();
  if (f.length > 0) {
    writer.writeString(2, f);
  }
  f = message.getSecrettoken_asU8();
  if (f.length > 0) {
    writer.writeBytes(3, f);
  }
  f = message.getCertfingerprint_asU8();
  if (f.length > 0) {
    writer.writeBytes(4, f);
  }
};

/**
 * optional bytes peerId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.PeerInfo.prototype.getPeerid = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes peerId = 1;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.Osmosis.PeerInfo.prototype.getPeerid_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPeerid()));
};

/**
 * optional bytes peerId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.Osmosis.PeerInfo.prototype.getPeerid_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPeerid()));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.PeerInfo.prototype.setPeerid = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional string peerName = 2;
 * @return {string}
 */
proto.Osmosis.PeerInfo.prototype.getPeername = function () {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''));
};

/** @param {string} value */
proto.Osmosis.PeerInfo.prototype.setPeername = function (value) {
  jspb.Message.setProto3StringField(this, 2, value);
};

/**
 * optional bytes secretToken = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.PeerInfo.prototype.getSecrettoken = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    3,
    ''
  ));
};

/**
 * optional bytes secretToken = 3;
 * This is a type-conversion wrapper around `getSecrettoken()`
 * @return {string}
 */
proto.Osmosis.PeerInfo.prototype.getSecrettoken_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSecrettoken()));
};

/**
 * optional bytes secretToken = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecrettoken()`
 * @return {!Uint8Array}
 */
proto.Osmosis.PeerInfo.prototype.getSecrettoken_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSecrettoken()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.PeerInfo.prototype.setSecrettoken = function (value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};

/**
 * optional bytes certFingerprint = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.PeerInfo.prototype.getCertfingerprint = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    4,
    ''
  ));
};

/**
 * optional bytes certFingerprint = 4;
 * This is a type-conversion wrapper around `getCertfingerprint()`
 * @return {string}
 */
proto.Osmosis.PeerInfo.prototype.getCertfingerprint_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
    this.getCertfingerprint()
  ));
};

/**
 * optional bytes certFingerprint = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCertfingerprint()`
 * @return {!Uint8Array}
 */
proto.Osmosis.PeerInfo.prototype.getCertfingerprint_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getCertfingerprint()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.PeerInfo.prototype.setCertfingerprint = function (value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.PairResponse = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    null,
    proto.Osmosis.PairResponse.oneofGroups_
  );
};
goog.inherits(proto.Osmosis.PairResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.PairResponse.displayName = 'proto.Osmosis.PairResponse';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Osmosis.PairResponse.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.Osmosis.PairResponse.PayloadCase = {
  PAYLOAD_NOT_SET: 0,
  PEER: 3,
};

/**
 * @return {proto.Osmosis.PairResponse.PayloadCase}
 */
proto.Osmosis.PairResponse.prototype.getPayloadCase = function () {
  return /** @type {proto.Osmosis.PairResponse.PayloadCase} */ (jspb.Message.computeOneofCase(
    this,
    proto.Osmosis.PairResponse.oneofGroups_[0]
  ));
};

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.PairResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Osmosis.PairResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.PairResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.PairResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        pin: jspb.Message.getFieldWithDefault(msg, 2, 0),
        peer:
          (f = msg.getPeer()) &&
          proto.Osmosis.PeerInfo.toObject(includeInstance, f),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.PairResponse}
 */
proto.Osmosis.PairResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.PairResponse();
  return proto.Osmosis.PairResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.PairResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.PairResponse}
 */
proto.Osmosis.PairResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.Osmosis.PairResponse.Status} */ (reader.readEnum());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setPin(value);
        break;
      case 3:
        var value = new proto.Osmosis.PeerInfo();
        reader.readMessage(
          value,
          proto.Osmosis.PeerInfo.deserializeBinaryFromReader
        );
        msg.setPeer(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.PairResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.PairResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.PairResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.PairResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getPin();
  if (f !== 0) {
    writer.writeUint32(2, f);
  }
  f = message.getPeer();
  if (f != null) {
    writer.writeMessage(3, f, proto.Osmosis.PeerInfo.serializeBinaryToWriter);
  }
};

/**
 * @enum {number}
 */
proto.Osmosis.PairResponse.Status = {
  ACCEPTED: 0,
  REJECTED: 1,
  ALREADY_PAIRED: 2,
};

/**
 * optional Status status = 1;
 * @return {!proto.Osmosis.PairResponse.Status}
 */
proto.Osmosis.PairResponse.prototype.getStatus = function () {
  return /** @type {!proto.Osmosis.PairResponse.Status} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    0
  ));
};

/** @param {!proto.Osmosis.PairResponse.Status} value */
proto.Osmosis.PairResponse.prototype.setStatus = function (value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional uint32 pin = 2;
 * @return {number}
 */
proto.Osmosis.PairResponse.prototype.getPin = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};

/** @param {number} value */
proto.Osmosis.PairResponse.prototype.setPin = function (value) {
  jspb.Message.setProto3IntField(this, 2, value);
};

/**
 * optional PeerInfo peer = 3;
 * @return {?proto.Osmosis.PeerInfo}
 */
proto.Osmosis.PairResponse.prototype.getPeer = function () {
  return /** @type{?proto.Osmosis.PeerInfo} */ (jspb.Message.getWrapperField(
    this,
    proto.Osmosis.PeerInfo,
    3
  ));
};

/** @param {?proto.Osmosis.PeerInfo|undefined} value */
proto.Osmosis.PairResponse.prototype.setPeer = function (value) {
  jspb.Message.setOneofWrapperField(
    this,
    3,
    proto.Osmosis.PairResponse.oneofGroups_[0],
    value
  );
};

proto.Osmosis.PairResponse.prototype.clearPeer = function () {
  this.setPeer(undefined);
};

/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Osmosis.PairResponse.prototype.hasPeer = function () {
  return jspb.Message.getField(this, 3) != null;
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.PairConfirm = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Osmosis.PairConfirm, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.PairConfirm.displayName = 'proto.Osmosis.PairConfirm';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.PairConfirm.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Osmosis.PairConfirm.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.PairConfirm} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.PairConfirm.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        peerid: msg.getPeerid_asB64(),
        accepted: jspb.Message.getFieldWithDefault(msg, 2, false),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.PairConfirm}
 */
proto.Osmosis.PairConfirm.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.PairConfirm();
  return proto.Osmosis.PairConfirm.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.PairConfirm} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.PairConfirm}
 */
proto.Osmosis.PairConfirm.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPeerid(value);
        break;
      case 2:
        var value = /** @type {boolean} */ (reader.readBool());
        msg.setAccepted(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.PairConfirm.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.PairConfirm.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.PairConfirm} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.PairConfirm.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getAccepted();
  if (f) {
    writer.writeBool(2, f);
  }
};

/**
 * optional bytes peerId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.PairConfirm.prototype.getPeerid = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes peerId = 1;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.Osmosis.PairConfirm.prototype.getPeerid_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPeerid()));
};

/**
 * optional bytes peerId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.Osmosis.PairConfirm.prototype.getPeerid_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPeerid()));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.PairConfirm.prototype.setPeerid = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bool accepted = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Osmosis.PairConfirm.prototype.getAccepted = function () {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    false
  ));
};

/** @param {boolean} value */
proto.Osmosis.PairConfirm.prototype.setAccepted = function (value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.PeerList = function (opt_data) {
  jspb.Message.initialize(
    this,
    opt_data,
    0,
    -1,
    proto.Osmosis.PeerList.repeatedFields_,
    null
  );
};
goog.inherits(proto.Osmosis.PeerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.PeerList.displayName = 'proto.Osmosis.PeerList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Osmosis.PeerList.repeatedFields_ = [1];

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.PeerList.prototype.toObject = function (opt_includeInstance) {
    return proto.Osmosis.PeerList.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.PeerList} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.PeerList.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        peersList: jspb.Message.toObjectList(
          msg.getPeersList(),
          proto.Osmosis.PeerInfo.toObject,
          includeInstance
        ),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.PeerList}
 */
proto.Osmosis.PeerList.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.PeerList();
  return proto.Osmosis.PeerList.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.PeerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.PeerList}
 */
proto.Osmosis.PeerList.deserializeBinaryFromReader = function (msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = new proto.Osmosis.PeerInfo();
        reader.readMessage(
          value,
          proto.Osmosis.PeerInfo.deserializeBinaryFromReader
        );
        msg.addPeers(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.PeerList.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.PeerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.PeerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.PeerList.serializeBinaryToWriter = function (message, writer) {
  var f = undefined;
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Osmosis.PeerInfo.serializeBinaryToWriter
    );
  }
};

/**
 * repeated PeerInfo peers = 1;
 * @return {!Array<!proto.Osmosis.PeerInfo>}
 */
proto.Osmosis.PeerList.prototype.getPeersList = function () {
  return /** @type{!Array<!proto.Osmosis.PeerInfo>} */ (jspb.Message.getRepeatedWrapperField(
    this,
    proto.Osmosis.PeerInfo,
    1
  ));
};

/** @param {!Array<!proto.Osmosis.PeerInfo>} value */
proto.Osmosis.PeerList.prototype.setPeersList = function (value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};

/**
 * @param {!proto.Osmosis.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Osmosis.PeerInfo}
 */
proto.Osmosis.PeerList.prototype.addPeers = function (opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(
    this,
    1,
    opt_value,
    proto.Osmosis.PeerInfo,
    opt_index
  );
};

proto.Osmosis.PeerList.prototype.clearPeersList = function () {
  this.setPeersList([]);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.ConnectRequest = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Osmosis.ConnectRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.ConnectRequest.displayName = 'proto.Osmosis.ConnectRequest';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.ConnectRequest.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Osmosis.ConnectRequest.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.ConnectRequest} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.ConnectRequest.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        peerid: msg.getPeerid_asB64(),
        secrettoken: msg.getSecrettoken_asB64(),
        ipaddress: jspb.Message.getFieldWithDefault(msg, 3, 0),
        port: jspb.Message.getFieldWithDefault(msg, 4, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.ConnectRequest}
 */
proto.Osmosis.ConnectRequest.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.ConnectRequest();
  return proto.Osmosis.ConnectRequest.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.ConnectRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.ConnectRequest}
 */
proto.Osmosis.ConnectRequest.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setPeerid(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSecrettoken(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setIpaddress(value);
        break;
      case 4:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setPort(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.ConnectRequest.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.ConnectRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.ConnectRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.ConnectRequest.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getPeerid_asU8();
  if (f.length > 0) {
    writer.writeBytes(1, f);
  }
  f = message.getSecrettoken_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getIpaddress();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(4, f);
  }
};

/**
 * optional bytes peerId = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.ConnectRequest.prototype.getPeerid = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    ''
  ));
};

/**
 * optional bytes peerId = 1;
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {string}
 */
proto.Osmosis.ConnectRequest.prototype.getPeerid_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getPeerid()));
};

/**
 * optional bytes peerId = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPeerid()`
 * @return {!Uint8Array}
 */
proto.Osmosis.ConnectRequest.prototype.getPeerid_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(this.getPeerid()));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.ConnectRequest.prototype.setPeerid = function (value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};

/**
 * optional bytes secretToken = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.ConnectRequest.prototype.getSecrettoken = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    ''
  ));
};

/**
 * optional bytes secretToken = 2;
 * This is a type-conversion wrapper around `getSecrettoken()`
 * @return {string}
 */
proto.Osmosis.ConnectRequest.prototype.getSecrettoken_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSecrettoken()));
};

/**
 * optional bytes secretToken = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecrettoken()`
 * @return {!Uint8Array}
 */
proto.Osmosis.ConnectRequest.prototype.getSecrettoken_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSecrettoken()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.ConnectRequest.prototype.setSecrettoken = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional uint32 ipAddress = 3;
 * @return {number}
 */
proto.Osmosis.ConnectRequest.prototype.getIpaddress = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.Osmosis.ConnectRequest.prototype.setIpaddress = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

/**
 * optional uint32 port = 4;
 * @return {number}
 */
proto.Osmosis.ConnectRequest.prototype.getPort = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};

/** @param {number} value */
proto.Osmosis.ConnectRequest.prototype.setPort = function (value) {
  jspb.Message.setProto3IntField(this, 4, value);
};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Osmosis.ConnectResponse = function (opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Osmosis.ConnectResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Osmosis.ConnectResponse.displayName = 'proto.Osmosis.ConnectResponse';
}

if (jspb.Message.GENERATE_TO_OBJECT) {
  /**
   * Creates an object representation of this proto suitable for use in Soy templates.
   * Field names that are reserved in JavaScript and will be renamed to pb_name.
   * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
   * For the list of reserved names please see:
   *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
   * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
   *     for transitional soy proto support: http://goto/soy-param-migration
   * @return {!Object}
   */
  proto.Osmosis.ConnectResponse.prototype.toObject = function (
    opt_includeInstance
  ) {
    return proto.Osmosis.ConnectResponse.toObject(opt_includeInstance, this);
  };

  /**
   * Static version of the {@see toObject} method.
   * @param {boolean|undefined} includeInstance Whether to include the JSPB
   *     instance for transitional soy proto support:
   *     http://goto/soy-param-migration
   * @param {!proto.Osmosis.ConnectResponse} msg The msg instance to transform.
   * @return {!Object}
   * @suppress {unusedLocalVariables} f is only used for nested messages
   */
  proto.Osmosis.ConnectResponse.toObject = function (includeInstance, msg) {
    var f,
      obj = {
        status: jspb.Message.getFieldWithDefault(msg, 1, 0),
        secrettoken: msg.getSecrettoken_asB64(),
        port: jspb.Message.getFieldWithDefault(msg, 3, 0),
      };

    if (includeInstance) {
      obj.$jspbMessageInstance = msg;
    }
    return obj;
  };
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Osmosis.ConnectResponse}
 */
proto.Osmosis.ConnectResponse.deserializeBinary = function (bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Osmosis.ConnectResponse();
  return proto.Osmosis.ConnectResponse.deserializeBinaryFromReader(msg, reader);
};

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Osmosis.ConnectResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Osmosis.ConnectResponse}
 */
proto.Osmosis.ConnectResponse.deserializeBinaryFromReader = function (
  msg,
  reader
) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
      case 1:
        var value = /** @type {!proto.Osmosis.ConnectResponse.Status} */ (reader.readEnum());
        msg.setStatus(value);
        break;
      case 2:
        var value = /** @type {!Uint8Array} */ (reader.readBytes());
        msg.setSecrettoken(value);
        break;
      case 3:
        var value = /** @type {number} */ (reader.readUint32());
        msg.setPort(value);
        break;
      default:
        reader.skipField();
        break;
    }
  }
  return msg;
};

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Osmosis.ConnectResponse.prototype.serializeBinary = function () {
  var writer = new jspb.BinaryWriter();
  proto.Osmosis.ConnectResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};

/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Osmosis.ConnectResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Osmosis.ConnectResponse.serializeBinaryToWriter = function (
  message,
  writer
) {
  var f = undefined;
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(1, f);
  }
  f = message.getSecrettoken_asU8();
  if (f.length > 0) {
    writer.writeBytes(2, f);
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(3, f);
  }
};

/**
 * @enum {number}
 */
proto.Osmosis.ConnectResponse.Status = {
  OK: 0,
  NOT_PAIRED: 1,
  BAD_TOKEN: 2,
  CONNECT_FAILED: 3,
  INTERNAL_ERROR: 4,
};

/**
 * optional Status status = 1;
 * @return {!proto.Osmosis.ConnectResponse.Status}
 */
proto.Osmosis.ConnectResponse.prototype.getStatus = function () {
  return /** @type {!proto.Osmosis.ConnectResponse.Status} */ (jspb.Message.getFieldWithDefault(
    this,
    1,
    0
  ));
};

/** @param {!proto.Osmosis.ConnectResponse.Status} value */
proto.Osmosis.ConnectResponse.prototype.setStatus = function (value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};

/**
 * optional bytes secretToken = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Osmosis.ConnectResponse.prototype.getSecrettoken = function () {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(
    this,
    2,
    ''
  ));
};

/**
 * optional bytes secretToken = 2;
 * This is a type-conversion wrapper around `getSecrettoken()`
 * @return {string}
 */
proto.Osmosis.ConnectResponse.prototype.getSecrettoken_asB64 = function () {
  return /** @type {string} */ (jspb.Message.bytesAsB64(this.getSecrettoken()));
};

/**
 * optional bytes secretToken = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSecrettoken()`
 * @return {!Uint8Array}
 */
proto.Osmosis.ConnectResponse.prototype.getSecrettoken_asU8 = function () {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
    this.getSecrettoken()
  ));
};

/** @param {!(string|Uint8Array)} value */
proto.Osmosis.ConnectResponse.prototype.setSecrettoken = function (value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};

/**
 * optional uint32 port = 3;
 * @return {number}
 */
proto.Osmosis.ConnectResponse.prototype.getPort = function () {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};

/** @param {number} value */
proto.Osmosis.ConnectResponse.prototype.setPort = function (value) {
  jspb.Message.setProto3IntField(this, 3, value);
};

goog.object.extend(exports, proto.Osmosis);
